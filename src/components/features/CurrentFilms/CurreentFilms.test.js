import React from 'react';
import { shallow } from 'enzyme';
import CurrentFilms from './CurrentFilms';
import {
  mockedPropsWhenLoading,
  mockedPropsWithData,
} from './mockedDataForTests';

Object.defineProperty(window, 'matchMedia', {
  writable: true,
  value: jest.fn().mockImplementation(query => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: jest.fn(), // deprecated
    removeListener: jest.fn(), // deprecated
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    dispatchEvent: jest.fn(),
  })),
});

const componentWhenLoading = shallow(<CurrentFilms {...mockedPropsWhenLoading}/>);
const componentWithData = shallow(<CurrentFilms {...mockedPropsWithData}/>);

describe('CurrentFilmsList component', () => {

  it('renders without crashing', () => {
    expect(componentWhenLoading).toBeTruthy();
    expect(componentWithData).toBeTruthy();
  });

  it('uses fetchMovies in ComponentDidMount only when movies data is not provided', () => {
    const fetchMoviesFunc = jest.fn();
    const fetchMoviesFunc2 = jest.fn();
    const component = shallow(<CurrentFilms isLoading={false} fetchMovies={fetchMoviesFunc} setFilter={jest.fn()}/>);
    component.instance();
    expect(fetchMoviesFunc).toHaveBeenCalledTimes(1);
    const component2 = shallow(
      <CurrentFilms 
        isLoading={false} 
        movies={mockedPropsWithData.movies}
        fetchMovies={fetchMoviesFunc2}
        setFilter={jest.fn()}
      />
    );
    component2.instance();
    expect(fetchMoviesFunc2).toHaveBeenCalledTimes(0);
  });

  it('includes Loader when data is loading', () => {
    const loaderEl = componentWhenLoading.find('.loader');
    expect(loaderEl.find('Loader').exists()).toBeTruthy();
  });

  it('does not includes Loader when loading data is finished', () => {
    expect(componentWithData.find('.loader').exists()).toBeFalsy();
  });

  it('includes CartsList with proper amount of data generated by method getGeneratedCarts', () => {
    const cartsListEl = componentWithData.find('CartsList');
    expect(cartsListEl.exists()).toBeTruthy();
    const instance = componentWithData.instance();
    expect(cartsListEl.prop('movies')).toEqual(instance.getGeneratedCarts());
  });

  it('includes button with proper action to get more carts only when carts amount is less than movies provided to component', () => {
    const buttonEl = componentWithData.find('.moreBtn Button');
    expect(buttonEl.exists()).toBeTruthy();
    expect(buttonEl.prop('action')).toBe(componentWithData.instance().getMoreCarts);
    // update state to 2 lists - it should rener max number of carts on screen
    componentWithData.setState({
      lists: 2,
    });
    // so button should not appear any more
    expect(componentWithData.find('.moreBtn Button').exists()).toBeFalsy();
  });
  
  it('includes noFound element with proper text only if loading has finished and movies data are not provided', () => {
    const expectedText = 'No movies were found. Please try to update searching criteria and try again. If you have chosen all movies and nothing was found, please try again later!';
    expect(componentWhenLoading.find('.noFound').exists()).toBeFalsy();
    expect(componentWithData.find('.noFound').exists()).toBeFalsy();
    const component = shallow(<CurrentFilms fetchMovies={jest.fn()} setFilter={jest.fn()} isLoading={false} isError={false} movies={[]}/>);
    const noFoundEl = component.find('p.noFound');
    expect(noFoundEl.exists()).toBeTruthy();
    expect(noFoundEl.text()).toEqual(expectedText);
  });

  it('includes ButtonList', () => {
    const buttonsListEl = componentWhenLoading.find('ButtonsList');
    expect(buttonsListEl.exists()).toBeTruthy();
    expect(buttonsListEl.prop('value')).toBe(mockedPropsWhenLoading.filter);
    expect(buttonsListEl.prop('buttons')).toBe(componentWhenLoading.instance().categoriesButtons);
    expect(buttonsListEl.prop('action')).toBe(mockedPropsWhenLoading.setFilter);
  });
});